1 双指针法
双指针法在很多数据结构和题型中都有应用，在链表中用的最多的还是快慢指针。

顾名思义，两个指针一个走得快，一个走得慢，这样的好处就是以不同的速度遍历链表，方便找到目标位置。

常见的问题比如找一个链表的中点，或者判断一个链表是否有环。

判断链表中点
我们用两个指针一起来遍历这个链表，每次快指针走 2 步，慢指针走 1 步，这样当快指针走到头的时候，慢指针应该刚好在链表的中点。

链表中是否有环
快慢指针，最终会在环内相遇，相遇则有环。并且从头节点走， 和相遇点一起走，会相遇在环的起点：用于判断环的起点节点



2 引入temp节点
合并有序链表


巧妙的构造虚拟头结点。可以使遍历处理逻辑更加统一。
灵活使用递归。构造递归条件，使用递归可以巧妙的解题。不过需要注意有些题目不能使用递归，因为递归深度太深会导致超时和栈溢出。
链表区间逆序。第 92 题。
链表寻找中间节点。第 876 题。链表寻找倒数第 n 个节点。第 19 题。只需要一次遍历就可以得到答案。
合并 K 个有序链表。第 21 题，第 23 题。
链表归类。第 86 题，第 328 题。
链表排序，时间复杂度要求 O(n * log n)，空间复杂度 O(1)。只有一种做法，归并排序，至顶向下归并。第 148 题。
判断链表是否存在环，如果有环，输出环的交叉点的下标；判断 2 个链表是否有交叉点，如果有交叉点，输出交叉点。第 141 题，第 142 题，第 160 题。



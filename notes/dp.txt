# 初始化 base case
dp[0][0][...] = base
# 进行状态转移
for 状态1 in 状态1的所有取值：
    for 状态2 in 状态2的所有取值：
        for ...
            dp[状态1][状态2][...] = 求最值(选择1，选择2...)

动态规划（Dynamic Programic，简称 DP）是一种求解最优解的方法，它是一种特殊的分治思想，利用它可以实现时间复杂度的优化，有时也可以进行空间复杂度的优化，有时是需要更多的空间的（相比其他方法）。

dynamic 是动态的意思，也就是变化的，programing 可以理解为方程（我瞎说的），结合起来就是动态规划是用状态转移方程来求得最优解的算法。

在解释动态规划的时候，我们顺便理一理和它相关的两种思想——分治和贪心算法。

分治
分治是把大问题分解成若干个子问题，这样的能分解性质就是最优子结构的。

最简单的例子就是小明在解决问题 A 的时候，发现问题 A 是由问题 B 和 C 一起组成的，所以他想要解决问题 A，
就需要把 B、C 一起去解决。

动态规划
动态规划是分治法的特例。

动态规划比分治法多了一种，就是重叠的子问题。

什么是重叠的子问题呢？举个例子来讲，可爱的小明遇到了一个可爱的问题，那就是问题 A，但是在前面需要解决一连串的问题，
我们用A1，A2，A3，A4 ... A来表示，在解决A1之后会用它的解去解决类似的问题A2， 然后再去解决A3，最终再去解决 A，
这就是重叠的子问题的典型代表。（下面的例题还会解释这个概念）

贪心
贪心比动态规划更加的特殊，它还需要问题满足另外一个性质——贪心选择性质，每次都可以把原问题分解成为一个子问题。

实际上再用动规的例子来说明贪心，在解决A1，A2，A3，A4 ... A的时候，他发现解决不光有一种重叠子问题的性质在里面，更有趣的是，
解决A1需要一种特殊的规则。

例如小明现在在玩电脑游戏，而电脑游戏的最终目的是到达A，而他又发现，只要一直往右边走就能到达最终的目的地了。
这就是一种贪心的算法，在每次往右边走，就是一种特殊的规则，而走到目的地A需要很多重复的子问题，也即每次活动一个单位。


回到动态规划，这里有四个基本的概念：

state（状态表示）
function（转移方程）
initial（初始化）
final state（最终的状态）
在刚开始的时候，我们首先需要构建一个存储数据的表格，一般是数组或者矩阵，然后设定好每一个格子到下一个格子需要的转移方程。

然后去执行重复的步骤，从初始化的状态一直计算到最终需要的状态。

回到小明的例子，刚开始的时候小明需要确定一个 state（A0代表的是什么），然后找到A0与A1之间的关系，
从初始化开始一直计算到最终的状态


dp[0][0][...] = 边界值
for(状态1 ：所有状态1的值){
    for(状态2 ：所有状态2的值){
        for(...){
          //状态转移方程
          dp[状态1][状态2][...] = 求最值
        }
    }
}

穷举分析
确定边界
找规律，确定最优子结构
状态转移方程

自顶向上的穷举
最简单的边界情况
确定最优子结构
dp(i) =max(dp(j))+1，存在j属于区间[0，i-1],并且num[i]>num[j]。
max(dp(j)) 就是最优子结构。


状态转移方程




f1 = 1
fi= fi-1 +1


回溯法
def backtrack(...):
    for 选择 in 选择列表:
        做选择
        backtrack(...)
        撤销选择


背包问题
int dp[N+1][W+1]
dp[0][..] = 0
dp[..][0] = 0

for i in [1..N]:
    for w in [1..W]:
        dp[i][w] = max(
            dp[i-1][w],
            dp[i-1][w - wt[i-1]] + val[i-1]
        )
return dp[N][W]

dp[i][j] = max(dp[i-1][j], nums[i][1]+dp[i-1][j-nums[i][0]]) 仔细想清楚这一行


凑零钱问题

1、确定 base case，这个很简单，显然目标金额 amount 为 0 时算法返回 0，因为不需要任何硬币就已经凑出目标金额了。

2、确定「状态」，也就是原问题和子问题中会变化的变量。由于硬币数量无限，硬币的面额也是题目给定的，
只有目标金额会不断地向 base case 靠近，所以唯一的「状态」就是目标金额 amount。

3、确定「选择」，也就是导致「状态」产生变化的行为。目标金额为什么变化呢，因为你在选择硬币，
你每选择一枚硬币，就相当于减少了目标金额。所以说所有硬币的面值，就是你的「选择」。

4、明确 dp 函数/数组的定义。我们这里讲的是自顶向下的解法，所以会有一个递归的 dp 函数，
一般来说函数的参数就是状态转移中会变化的量，也就是上面说到的「状态」；函数的返回值就是题目要求我们计算的量。
就本题来说，状态只有一个，即「目标金额」，题目要求我们计算凑出目标金额所需的最少硬币数量。所以我们可以这样定义 dp 函数：

dp(n) 的定义：输入一个目标金额 n，返回凑出目标金额 n 的最少硬币数量。

# 伪码框架
def coinChange(coins: List[int], amount: int):

    # 定义：要凑出金额 n，至少要 dp(n) 个硬币
    def dp(n):
        # 做选择，选择需要硬币最少的那个结果
        for coin in coins:
            res = min(res, 1 + dp(n - coin))
        return res

    # 题目要求的最终结果是 dp(amount)
    return dp(amount)


使用DP备忘录
int coinChange(vector<int>& coins, int amount) {
    // 数组大小为 amount + 1，初始值也为 amount + 1
    vector<int> dp(amount + 1, amount + 1);
    // base case
    dp[0] = 0;
    // 外层 for 循环在遍历所有状态的所有取值
    for (int i = 0; i < dp.size(); i++) {
        // 内层 for 循环在求所有选择的最小值
        for (int coin : coins) {
            // 子问题无解，跳过
            if (i - coin < 0) continue;
            dp[i] = min(dp[i], 1 + dp[i - coin]);
        }
    }
    return (dp[amount] == amount + 1) ? -1 : dp[amount];
}

01背包 和完全背包
class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
        vector<int> dp(amount+1,amount+1);
        dp.front()=0;
        for(int j=0;j<coins.size();++j)
        {
            for(int i=1;i<=amount;++i)//如果是01背包，在这里不可以正向遍历，必须反向遍历，证明每一个元素我们只能选取一次
                                      //而在这里由于我们正向遍历，我们本次选择的coins元素会多次对结果造成影响，也就说明每一个元素
                                      //可以多次选择，而且我们只能正向遍历，若反向，则错误
            {
                if(i>=coins[j])
                dp[i]=min(dp[i],dp[i-coins[j]]+1);
            }
        }
        return dp.back()>amount?-1:dp.back();
    }
};


0-1背包问题母代码(二维)
void bags()
{
    vector<int> weight = {1, 3, 4};   //各个物品的重量
    vector<int> value = {15, 20, 30}; //对应的价值
    int bagWeight = 4;                //背包最大能放下多少重的物品

    // 二维数组：状态定义:dp[i][j]表示从0-i个物品中选择不超过j重量的物品的最大价值
    vector<vector<int>> dp(weight.size() + 1, vector<int>(bagWeight + 1, 0));

    // 初始化:第一列都是0，第一行表示只选取0号物品最大价值
    for (int j = bagWeight; j >= weight[0]; j--)
        dp[0][j] = dp[0][j - weight[0]] + value[0];

    // weight数组的大小 就是物品个数
    for (int i = 1; i < weight.size(); i++) // 遍历物品(第0个物品已经初始化)
    {
        for (int j = 0; j <= bagWeight; j++) // 遍历背包容量
        {
            if (j < weight[i])           //背包容量已经不足以拿第i个物品了
                dp[i][j] = dp[i - 1][j]; //最大价值就是拿第i-1个物品的最大价值
            //背包容量足够拿第i个物品,可拿可不拿：拿了最大价值是前i-1个物品扣除第i个物品的 重量的最大价值加上i个物品的价值
            //不拿就是前i-1个物品的最大价值,两者进行比较取较大的
            else
                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]);
        }
    }
    cout << dp[weight.size() - 1][bagWeight] << endl;
}

首先是背包分类的模板：
1、0/1背包：外循环nums,内循环target,target倒序且target>=nums[i];
2、完全背包：外循环nums,内循环target,target正序且target>=nums[i];
3、组合背包(考虑顺序)：外循环target,内循环nums,target正序且target>=nums[i];
4、分组背包：这个比较特殊，需要三重循环：外循环背包bags,内部两层循环根据题目的要求转化为1,2,3三种背包类型的模板

然后是问题分类的模板：
1、最值问题: dp[i] = max/min(dp[i], dp[i-nums]+1)或dp[i] = max/min(dp[i], dp[i-num]+nums);
2、存在问题(bool)：dp[i]=dp[i]||dp[i-num];
3、组合问题：dp[i]+=dp[i-num];


01背包：
for(int i = 0; i < weight.size(); i++) { // 遍历物品
    for(int j = bagWeight; j >= weight[i]; j--) { // 遍历背包容量
        dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);
    }
}

完全背包
// 先遍历物品，再遍历背包
for(int i = 0; i < weight.size(); i++) { // 遍历物品
    for(int j = weight[i]; j <= bagWeight ; j++) { // 遍历背包容量
        dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);

    }
}


举一个例子：物品0的重量weight[0] = 1，价值value[0] = 15

如果正序遍历

dp[1] = dp[1 - weight[0]] + value[0] = 15

dp[2] = dp[2 - weight[0]] + value[0] = 30

此时dp[2]就已经是30了，意味着物品0，被放入了两次，所以不能正序遍历。

为什么倒叙遍历，就可以保证物品只放入一次呢？

倒叙就是先算dp[2]

dp[2] = dp[2 - weight[0]] + value[0] = 15  （dp数组已经都初始化为0）

dp[1] = dp[1 - weight[0]] + value[0] = 15

所以从后往前循环，每次取得状态不会和之前取得状态重合，这样每种物品就只取一次了。

